// src/app/huongdan/[san]/page.tsx
import Link from "next/link"
// Map ref theo s√†n => ƒë·ªçc tr·ª±c ti·∫øp t·ª´ ENV
const REF_LINKS: Record<string, string | undefined> = {
  binance: process.env.REF_BINANCE,
  bybit: process.env.REF_BYBIT,
  // sau n√†y th√™m okx: process.env.REF_OKX, ...
}


type Step = { title: string; desc: string }
type VideoSpec =
  | { type: "file"; src: string; note?: string }
  | { type: "youtube"; src: string; note?: string }

type Section = {
  heading: string
  steps: { title: string; desc: string }[]
  video?: { type: "youtube" | "file"; src: string; note?: string }
}

type Guide = {
  title: string
  intro: string
  sections: Section[] // Binance c√≥ 5, Bybit c√≥ 3 ‚Äî tu·ª≥ √Ω
}

/* --------- Video component --------- */
function Video({ video }: { video?: VideoSpec }) {
  if (!video) return null
  if (video.type === "youtube") {
    return (
      <div className="mt-4 aspect-video overflow-hidden rounded-xl border border-white/10">
        <iframe
          className="h-full w-full"
          src={video.src}
          title="Video h∆∞·ªõng d·∫´n"
          allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share"
          allowFullScreen
        />
      </div>
    )
  }
  return (
    <div className="mt-4 overflow-hidden rounded-xl border border-white/10">
      <video controls className="w-full">
        <source src={video.src} />
      </video>
      {video.note && <p className="mt-2 text-xs text-slate-400">{video.note}</p>}
    </div>
  )
}

function SectionBlock({
  s,
  index,
  refUrl,
}: {
  s: Section
  index: number
  refUrl?: string
}) {
  return (
    <section id={`cach-${index + 1}`} className="mt-8 rounded-2xl border border-white/10 bg-slate-900/50 p-6">
      <h2 className="text-xl font-bold">{s.heading}</h2>

      <ol className="mt-4 space-y-3">
        {s.steps.map((st, i) => (
          <li key={i} className="rounded-xl border border-white/10 p-4">
            <div className="flex items-start justify-between gap-3">
              <div className="pr-3">
                <p className="font-semibold">{st.title}</p>
                <p className="text-sm text-slate-300">{st.desc}</p>
              </div>

              {/* Ch·ªâ hi·ªán ·ªü C√°ch 1 - B∆∞·ªõc 1 v√† khi c√≥ refUrl */}
              {index === 0 && i === 0 && refUrl && (
                <a
                  href={refUrl}
                  target="_blank"
                  rel="noopener noreferrer"
                  className="ml-4 whitespace-nowrap rounded-lg bg-amber-500 px-3 py-1.5 text-sm font-semibold text-slate-950 hover:bg-amber-400 transition"
                >
                  ƒêƒÉng k√Ω
                </a>
              )}
            </div>
          </li>
        ))}
      </ol>

      {/* Video n·∫øu c√≥ */}
      {s.video?.type === "youtube" && (
        <iframe
          className="mt-4 h-96 w-full rounded-lg"
          src={s.video.src}
          title="YouTube video"
          frameBorder="0"
          allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
          allowFullScreen
        />
      )}
      {s.video?.type === "file" && (
        <video controls className="mt-4 h-96 w-full rounded-lg">
          <source src={s.video.src} type="video/mp4" />
          Tr√¨nh duy·ªát kh√¥ng h·ªó tr·ª£ video.
        </video>
      )}
    </section>
  )
}


/* --------- D·ªØ li·ªáu h∆∞·ªõng d·∫´n --------- */
const GUIDES: Record<string, Guide> = {
  binance: {
    title: "H∆∞·ªõng d·∫´n Binance",
    intro:
      "C√°c b∆∞·ªõc ƒëƒÉng k√Ω, KYC, b·∫£o m·∫≠t v√† n·∫°p ti·ªÅn tr√™n Binance. Khuy·∫øn ngh·ªã b·∫≠t 2FA v√† x√°c minh danh t√≠nh (KYC) ƒë·ªÉ b·∫£o m·∫≠t v√† m·ªü ƒë·∫ßy ƒë·ªß t√≠nh nƒÉng.",
    sections: [
      {
        heading: "C√°ch 1: ƒêƒÉng k√Ω t√†i kho·∫£n",
        steps: [
          { title: "M·ªü link ref", desc: "Nh·∫•n n√∫t ƒêƒÉng k√Ω ·ªü trang ch·ªß ƒë·ªÉ m·ªü link ref CHUYENCRYPTO." },
          { title: "Ch·ªçn ph∆∞∆°ng th·ª©c", desc: "ƒêƒÉng k√Ω b·∫±ng email ho·∫∑c s·ªë ƒëi·ªán tho·∫°i, ƒë·∫∑t m·∫≠t kh·∫©u ƒë·ªß m·∫°nh." },
          { title: "X√°c minh email/OTP", desc: "Nh·∫≠p m√£ x√°c th·ª±c g·ª≠i v·ªÅ email/ƒëi·ªán tho·∫°i." },
          { title: "ƒê·ªìng √Ω ƒëi·ªÅu kho·∫£n", desc: "ƒê·ªçc k·ªπ TOS v√† x√°c nh·∫≠n." },
          { title: "ƒêƒÉng nh·∫≠p l·∫ßn ƒë·∫ßu", desc: "Ho√†n t·∫•t t·∫°o t√†i kho·∫£n v√† ƒëƒÉng nh·∫≠p." },
        ],
        // video: { type: "file", src: "/videos/binance-register.mp4", note: "ƒê·∫∑t file v√†o public/videos/binance-register.mp4" },
        video: { type: "youtube", src: "https://www.youtube.com/embed/7HYuaAtsg-A?si=67NnykiUZgGulfEN" },
      },
      {
        heading: "C√°ch 2: KYC t√†i kho·∫£n",
        steps: [
          { title: "V√†o Profile ‚Üí Identification", desc: "Ch·ªçn Begin Verification." },
          { title: "T·∫£i gi·∫•y t·ªù", desc: "CMND/CCCD/H·ªô chi·∫øu c√≤n h·∫°n." },
          { title: "X√°c th·ª±c khu√¥n m·∫∑t", desc: "L√†m theo h∆∞·ªõng d·∫´n tr√™n m√†n h√¨nh." },
          { title: "Ch·ªù duy·ªát", desc: "V√†i ph√∫t t·ªõi v√†i gi·ªù." },
          { title: "Ki·ªÉm tra tr·∫°ng th√°i", desc: "Khi KYC Passed, t√≠nh nƒÉng ƒë∆∞·ª£c m·ªü r·ªông." },
        ],
        video: { type: "youtube", src: "https://www.youtube.com/embed/oTjbE_j88g8?si=yWGNOmU0LwDd6PQb" },
      },
      {
        heading: "C√°ch 3: N·∫°p ti·ªÅn qua P2P",
        steps: [
          { title: "Ch·ªçn ph∆∞∆°ng th·ª©c", desc: "P2P (VND), ho·∫∑c chuy·ªÉn kho·∫£n ƒë·ªëi t√°c." },
          { title: "Ch·ªçn ng∆∞·ªùi b√°n h·ª£p l√≠", desc: "Ph·∫£i c√≥ l·ªánh th√†nh c√¥ng cao, ƒë√°nh gi√° t·ªët t·ª´ c·ªông ƒë·ªìng,..." },
          { title: "Chuy·ªÉn kho·∫£n v√† X√°c nh·∫≠n l·ªánh", desc: "N·ªôi dung chuy·ªÉn ph·∫£i l√† s·ªë l·ªánh v√† ƒë√∫ng s·ªë ti·ªÅn c·∫ßn mua" },
          { title: "Ki·ªÉm tra s·ªë d∆∞", desc: "Sau khi v√†o v√≠, ki·ªÉm tra ·ªü Wallet" },
        ],
        video: { type: "youtube", src: "https://www.youtube.com/embed/gXJGYlYgHWI?si=SYt_FUztqgAoR9n_" },
      },
      {
        heading: "C√°ch 4: X√≥a t√†i kho·∫£n Binance",
        steps: [
          { title: "Ch·ªçn c√†i ƒë·∫∑t", desc: "Trong ph·∫ßn t√†i kho·∫£n" },
          { title: "Ch·ªçn Security", desc: "K√©o xu·ªëng ki·∫øm Manage Account" },
          { title: "Ch·ªçn Delete Account", desc: "Ch·ªçn No longer want to use this account" },
          { title: "L∆∞u √Ω", desc: "Kh√¥ng c√≤n ƒë·ªÉ l·ªánh limit Future v√† t·ªïng t√†i s·∫£n d∆∞·ªõi 5$" },
        ],
        video: { type: "youtube", src: "https://www.youtube.com/embed/yiCztfJVNag?si=EFLV-imyyagU8Wgz" },
      },
    ],
  },

  // Bybit
  bybit: {
    title: "H∆∞·ªõng d·∫´n Bybit",
    intro:
      "C√°c b∆∞·ªõc ƒëƒÉng k√Ω, n·∫°p ti·ªÅn v√† l∆∞u √Ω giao d·ªãch ph√°i sinh tr√™n Bybit. Lu√¥n qu·∫£n tr·ªã r·ªßi ro khi d√πng ƒë√≤n b·∫©y.",
    sections: [
      {
        heading: "C√°ch 1: ƒêƒÉng k√Ω t√†i kho·∫£n",
        steps: [
          { title: "M·ªü link ref", desc: "Nh·∫•n n√∫t ƒêƒÉng k√Ω (ref CHUYENCRYPTO) ·ªü trang ch·ªß." },
          { title: "Nh·∫≠p th√¥ng tin", desc: "Email/SƒêT, m·∫≠t kh·∫©u m·∫°nh." },
          { title: "X√°c minh OTP", desc: "Nh·∫≠p m√£ x√°c th·ª±c g·ª≠i v·ªÅ mail." },
          { title: "ƒê·ªìng √Ω ƒëi·ªÅu kho·∫£n", desc: "ƒê·ªçc k·ªπ v√† x√°c nh·∫≠n." },
          { title: "ƒêƒÉng nh·∫≠p l·∫ßn ƒë·∫ßu", desc: "Ho√†n t·∫•t t·∫°o t√†i kho·∫£n v√† ƒëƒÉng nh·∫≠p." },
        ],
        video: { type: "youtube", src: "https://www.youtube.com/embed/MaKZlQPhOxQ?si=9U2dSz09TvoEoARb" },
      },
      {
        heading: "C√°ch 2: KYC t√†i kho·∫£n",
        steps: [
          { title: "V√†o Profile ‚Üí Identification", desc: "Ch·ªçn Begin Verification." },
          { title: "T·∫£i gi·∫•y t·ªù", desc: "CMND/CCCD/H·ªô chi·∫øu c√≤n h·∫°n." },
          { title: "X√°c th·ª±c khu√¥n m·∫∑t", desc: "L√†m theo h∆∞·ªõng d·∫´n tr√™n m√†n h√¨nh." },
          { title: "Ch·ªù duy·ªát", desc: "V√†i ph√∫t t·ªõi v√†i gi·ªù." },
          { title: "Ki·ªÉm tra tr·∫°ng th√°i", desc: "Khi KYC Passed, t√≠nh nƒÉng ƒë∆∞·ª£c m·ªü r·ªông." },
        ],
        video: { type: "youtube", src: "https://www.youtube.com/embed/gHaz9d2DaWk?si=3k3B32Nxu1kV6fDk" },
      },
      {
        heading: "C√°ch 3: H∆∞·ªõng d·∫´n chuy·ªÉn USDT t·ª´ Binance sang Bybit",
        steps: [
          { title: "Chuy·ªÉn ti·ªÅn v√†o v√≠ Spot Binance", desc: "" },
          { title: "Ch·ªçn m·∫°ng ƒë·ªÉ r√∫t", desc: "L∆∞u √Ω m·∫°ng c·ªßa 2 s√†n ph·∫£i gi·ªëng nhau" },
          { title: "L∆∞u ·∫£nh ƒë·ªãa ch·ªâ v√≠ c·ªßa s√†n c·∫ßn n·∫°p", desc: "Tr∆∞·ªùng h·ª£p n√†y ƒë∆°n gi·∫£n nh·∫•t" },
          { title: "Ki·ªÉm tra tr√™n chu·ªói", desc: "Ch·ªù ti·ªÅn v√†o v√≠" },
          { title: "L∆∞u √Ω", desc: "H√£y xem to√†n b·ªô Video r·ªìi th·ª±c h√†nh" },
        ],
        video: { type: "youtube", src: "https://www.youtube.com/embed/tehF6rHUEsQ?si=86FrZgiqn1TeQ1eX" },
      },
      {
        heading: "C√°ch 4: N·∫°p ti·ªÅn qua P2P",
        steps: [
          { title: "L∆∞u √Ω", desc: "N·ªôi dung chuy·ªÉn kho·∫£n ph·∫£i ƒë√∫ng v·ªõi s·ªë l·ªánh" },
        ],
        video: { type: "youtube", src: "https://www.youtube.com/embed/6sodJFFvncQ?si=8-6Yn9vu0KX3qRth" },
      },
    ],
  },
}

/* --------- Page --------- */
export default async function Page(
  { params }: { params: Promise<{ san: string }> } // üîß Next 15: params l√† Promise
) {
  const { san } = await params;                    // ‚úÖ ph·∫£i await
  const key = san?.toLowerCase();
  const guide = GUIDES[key];
  const refUrl = REF_LINKS[key];

  if (!guide) {
    return (
      <div className="mx-auto max-w-3xl px-4 py-16">
        <Link href="/" className="text-sm text-slate-400 hover:text-slate-200">‚Üê V·ªÅ trang ch·ªß</Link>
        <h1 className="mt-3 text-3xl font-bold">Kh√¥ng t√¨m th·∫•y h∆∞·ªõng d·∫´n cho: {san}</h1>
        <p className="mt-2 text-slate-300">H√£y ki·ªÉm tra l·∫°i ƒë∆∞·ªùng d·∫´n.</p>
      </div>
    )
  }

  return (
    <div className="mx-auto max-w-3xl px-4 py-16">
      <Link href="/" className="text-sm text-slate-400 hover:text-slate-200">‚Üê V·ªÅ trang ch·ªß</Link>
      <h1 className="mt-3 text-3xl font-bold">{guide.title}</h1>
      <p className="mt-2 text-slate-300">{guide.intro}</p>

      {/* M·ª•c l·ª•c nhanh */}
      <nav className="mt-6 flex flex-wrap gap-2">
        {guide.sections.map((s, i) => (
          <a key={i} href={`#cach-${i + 1}`} className="rounded-lg border border-white/10 px-3 py-1 text-sm text-slate-200 hover:bg-white/5">
            {s.heading}
          </a>
        ))}
      </nav>

      {guide.sections.map((s, i) => (
        <SectionBlock key={i} s={s} index={i} refUrl={refUrl} />
      ))}

      <div className="mt-10 rounded-xl border border-white/10 bg-slate-900/50 p-4 text-sm text-slate-400">
        L∆∞u √Ω: Crypto l√† t√†i s·∫£n r·ªßi ro cao. Giao d·ªãch c√≥ tr√°ch nhi·ªám.
      </div>
    </div>
  )

}
